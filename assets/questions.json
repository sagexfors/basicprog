{
  "questions": [
    {
      "question": "Who created the C programming language?",
      "options": [
        "Linus Torvalds",
        "James Gosling",
        "Dennis Ritchie",
        "Guido van Rossum"
      ],
      "answer": 2
    },
    {
      "question": "Why is C considered a fundamental language in computer science?",
      "options": [
        "Because it is used in web development.",
        "Due to its simplicity and ease of use.",
        "Because it is a general-purpose language fundamental to many technologies.",
        "It is the only language used in operating systems."
      ],
      "answer": 2
    },
    {
      "question": "C is closely associated with which operating system?",
      "options": [
        "Windows",
        "macOS",
        "UNIX",
        "Linux"
      ],
      "answer": 2
    },
    {
      "question": "Learning C can be beneficial because:",
      "options": [
        "It is only used in academic settings.",
        "It is similar to Java and Python, making other languages easier to learn.",
        "It is the latest programming language.",
        "It is only useful for writing operating systems."
      ],
      "answer": 1
    },
    {
      "question": "What is a key difference between C and C++?",
      "options": [
        "C++ is slower than C.",
        "C supports classes and objects, but C++ does not.",
        "C++ is an extension of C with support for classes and objects.",
        "C and C++ are exactly the same."
      ],
      "answer": 2
    },
    {
      "question": "What is the purpose of #include <stdio.h> in a C program?",
      "options": [
        "It defines the main function.",
        "It includes a library for input and output functions.",
        "It creates a loop in the program.",
        "It ends the program."
      ],
      "answer": 1
    },
    {
      "question": "In C programming, what is the significance of a blank line or white space?",
      "options": [
        "It causes a syntax error.",
        "It is used to declare variables.",
        "It is ignored by the compiler and used for readability.",
        "It indicates the end of a function."
      ],
      "answer": 2
    },
    {
      "question": "What does the main() function represent in a C program?",
      "options": [
        "An error in the code.",
        "A variable declaration.",
        "The starting point where the program begins execution.",
        "A comment in the code."
      ],
      "answer": 2
    },
    {
      "question": "What is the function of printf() in C?",
      "options": [
        "To pause the execution of the program.",
        "To take input from the user.",
        "To output or print text to the screen.",
        "To terminate the program."
      ],
      "answer": 2
    },
    {
      "question": "What does the return 0; statement signify in the main() function?",
      "options": [
        "It causes the program to loop indefinitely.",
        "It returns control to the operating system with a success status.",
        "It initializes a variable to 0.",
        "It deletes all variables used in the program."
      ],
      "answer": 1
    },
    {
      "question": "Why is it important to use multiple lines and white spaces in C code?",
      "options": [
        "To increase the execution time of the program.",
        "To make the code more readable and maintainable.",
        "To separate different functions in the program.",
        "To avoid syntax errors in the program."
      ],
      "answer": 1
    },
    {
      "question": "What is the function used to output or print text in C?",
      "options": [
        "print()",
        "output()",
        "printf()",
        "echo()"
      ],
      "answer": 2
    },
    {
      "question": "What is a characteristic of the printf() function in terms of line breaks?",
      "options": [
        "It automatically adds a new line at the end of each output.",
        "It does not insert a new line at the end of the output.",
        "It only works with single-line outputs.",
        "It causes a syntax error if used more than once."
      ],
      "answer": 1
    },
    {
      "question": "How many printf() functions can you use in a C program?",
      "options": [
        "Only one",
        "Exactly two",
        "No limit, as many as you want",
        "Not more than three"
      ],
      "answer": 2
    },
    {
      "question": "In the following code, what will be the output?\n\n#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\");\n  printf(\"I am learning C.\");\n  return 0;\n}",
      "options": [
        "Hello World! I am learning C.",
        "Hello World!\nI am learning C.",
        "Hello World!I am learning C.",
        "The program will not compile."
      ],
      "answer": 2
    },
    {
      "question": "Which statement is true regarding the printf() function?",
      "options": [
        "It is used for inputting data from the user.",
        "It can only print text and not variables.",
        "It is a built-in function in C for printing text to the screen.",
        "It automatically closes the program after execution."
      ],
      "answer": 2
    },
    {
      "question": "How do you insert a new line in C using printf()?",
      "options": [
        "By using \newline",
        "By using \n",
        "By using \\n",
        "By using </n>"
      ],
      "answer": 1
    },
    {
      "question": "What is the result of using \n in a printf() statement?",
      "options": [
        "It creates a new variable.",
        "It causes a syntax error.",
        "It forces the cursor to the beginning of the next line.",
        "It terminates the program."
      ],
      "answer": 2
    },
    {
      "question": "How can you output multiple lines with a single printf() function?",
      "options": [
        "By using multiple \n characters within the string.",
        "By using the \\multiple command.",
        "By ending each line with a semicolon.",
        "By writing each line in a new printf() statement."
      ],
      "answer": 1
    },
    {
      "question": "What does the following code output?\n\n#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\\n\\n\");\n  printf(\"I am learning C.\");\n  return 0;\n}",
      "options": [
        "Hello World! I am learning C.",
        "Hello World!\nI am learning C.",
        "Hello World!\n\nI am learning C.",
        "The code will not compile."
      ],
      "answer": 2
    },
    {
      "question": "What is an escape sequence in C programming?",
      "options": [
        "A function that exits the program.",
        "A sequence that escapes errors in the code.",
        "A character sequence that performs a control function, like \n for a new line.",
        "A method to increase the speed of the program."
      ],
      "answer": 2
    },
    {
      "question": "Which of the following is a valid escape sequence in C?",
      "options": [
        "\\t for creating a horizontal tab",
        "\\c for changing the color of the text",
        "\\p for printing a new page",
        "\\e for exiting the program"
      ],
      "answer": 1
    },
    {
      "question": "How do you write a single-line comment in C?",
      "options": [
        "By starting the line with #",
        "By starting the line with /*",
        "By starting the line with //",
        "By starting the line with <!--"
      ],
      "answer": 2
    },
    {
      "question": "What happens to the text within a single-line comment in C?",
      "options": [
        "It gets highlighted in the code editor.",
        "It is executed first.",
        "It is ignored by the compiler.",
        "It causes a syntax error."
      ],
      "answer": 2
    },
    {
      "question": "How are multi-line comments created in C?",
      "options": [
        "By enclosing the comment with <!-- and -->",
        "By starting with // and ending with \\n",
        "By enclosing the comment with /* and */",
        "By using a # at the beginning of each line"
      ],
      "answer": 2
    },
    {
      "question": "What is the purpose of comments in C code?",
      "options": [
        "To increase the speed of execution.",
        "To explain and make the code more readable.",
        "To change how the code is compiled.",
        "To create variables."
      ],
      "answer": 1
    },
    {
      "question": "Which of the following is true about C comments?",
      "options": [
        "They were introduced in C99.",
        "Before C99, only single-line comments were available.",
        "Before C99, only multi-line comments were available.",
        "Comments have been removed in the latest version of C."
      ],
      "answer": 2
    },
    {
      "question": "In the following code, what is the purpose of the comment?\n\n// This is a comment\nprintf(\"Hello World!\");",
      "options": [
        "To display a message before \"Hello World!\"",
        "To explain or clarify the code line that follows.",
        "To create a new function.",
        "To modify the output of printf()."
      ],
      "answer": 1
    },
    {
      "question": "What does an int type variable store in C?",
      "options": [
        "Decimal numbers.",
        "Characters.",
        "Whole numbers without decimals.",
        "Strings of text."
      ],
      "answer": 2
    },
    {
      "question": "How do you declare a variable in C?",
      "options": [
        "variableName type = value;",
        "type variableName = value;",
        "declare variableName = value;",
        "variableName = value;"
      ],
      "answer": 1
    },
    {
      "question": "What is the role of format specifiers in C?",
      "options": [
        "To define the type of a variable.",
        "To specify the variable type in a printf() function.",
        "To initialize a variable.",
        "To terminate the program."
      ],
      "answer": 2
    },
    {
      "question": "Which format specifier is used for printing an integer value in C?",
      "options": [
        "%f",
        "%c",
        "%d or %i",
        "%s"
      ],
      "answer": 2
    },
    {
      "question": "How do you print a character and an integer in the same printf() statement?",
      "options": [
        "printf(\"My number is %d and my letter is %c\", myNum, myLetter);",
        "printf(\"My number is myNum and my letter is myLetter\");",
        "printf(\"My number is %i and my letter is %f\", myNum, myLetter);",
        "printf(myNum, myLetter);"
      ],
      "answer": 1
    },
    {
      "question": "What happens when you assign a new value to an already initialized variable in C?",
      "options": [
        "It creates a new variable.",
        "It appends the new value to the old one.",
        "It overwrites the previous value.",
        "It causes an error."
      ],
      "answer": 2
    },
    {
      "question": "What type of data does the float data type store in C?",
      "options": [
        "Whole numbers.",
        "Characters.",
        "Fractional numbers with one or more decimals.",
        "Strings of text."
      ],
      "answer": 2
    },
    {
      "question": "Which data type is used to store a single character in C?",
      "options": [
        "int",
        "float",
        "double",
        "char"
      ],
      "answer": 3
    },
    {
      "question": "What is the size of an int data type in C?",
      "options": [
        "1 byte",
        "2 or 4 bytes",
        "8 bytes",
        "16 bytes"
      ],
      "answer": 1
    },
    {
      "question": "Which format specifier is used for a double data type in C?",
      "options": [
        "%d",
        "%f",
        "%lf",
        "%c"
      ],
      "answer": 2
    },
    {
      "question": "How can you set decimal precision for a floating point number in C?",
      "options": [
        "Using %d with the number of decimal places.",
        "Using a dot (.) followed by the number of decimal places in %f.",
        "It is not possible to set decimal precision in C.",
        "Using %p with the number of decimal places."
      ],
      "answer": 1
    },
    {
      "question": "What will be the output of the following C code?\n\n#include <stdio.h>\n\nfloat myFloatNum = 3.5;\nprintf(\"%.2f\", myFloatNum);",
      "options": [
        "3.50",
        "3.5",
        "3.500000",
        "3"
      ],
      "answer": 1
    },
    {
      "question": "What is type conversion in C programming?",
      "options": [
        "Changing the name of a variable.",
        "Converting the value of one data type to another.",
        "Removing a variable from memory.",
        "Converting a program from C to another language."
      ],
      "answer": 1
    },
    {
      "question": "What happens when you divide two integers in C?",
      "options": [
        "The result is always a floating-point number.",
        "The result is always rounded to the nearest integer.",
        "The result is an integer that truncates any decimal part.",
        "It causes a runtime error."
      ],
      "answer": 2
    },
    {
      "question": "How does implicit conversion work in C?",
      "options": [
        "It requires the programmer to manually change the data type.",
        "The compiler automatically converts one data type to another.",
        "It only works with string data types.",
        "It converts all variables to integers."
      ],
      "answer": 1
    },
    {
      "question": "What is the result of this implicit conversion in C?\n\nint myInt = 9.99;",
      "options": [
        "9.99",
        "9.9",
        "9",
        "10"
      ],
      "answer": 3
    },
    {
      "question": "How can you manually convert an integer to a float in C?",
      "options": [
        "By using the convert() function.",
        "By placing the type in parentheses in front of the value.",
        "By changing the variable declaration.",
        "It is not possible to manually convert types in C."
      ],
      "answer": 1
    },
    {
      "question": "What is the correct way to get the result of 5 divided by 2 as a floating-point number in C?",
      "options": [
        "float sum = 5 / 2;",
        "float sum = 5.0 / 2;",
        "float sum = (float) 5 / 2;",
        "float sum = 5 / 2.0;"
      ],
      "answer": 2
    },
    {
      "question": "What is the purpose of the const keyword in C?",
      "options": [
        "To declare a variable that can change.",
        "To create a new type of variable.",
        "To declare a variable as unchangeable and read-only.",
        "To increase the speed of the program."
      ],
      "answer": 2
    },
    {
      "question": "What happens if you try to change the value of a constant variable in C?",
      "options": [
        "The program automatically updates the value.",
        "The program ends.",
        "It causes a compilation error.",
        "The constant variable becomes a regular variable."
      ],
      "answer": 2
    },
    {
      "question": "How should a constant variable be declared in C?",
      "options": [
        "With the variable name in lowercase.",
        "Without initializing it at declaration.",
        "By assigning a value at the time of declaration.",
        "By using the #define directive."
      ],
      "answer": 2
    },
    {
      "question": "Which of the following is the correct way to declare a constant in C?",
      "options": [
        "int const myNum = 15;",
        "const int myNum = 15;",
        "int myNum; const myNum = 15;",
        "const int myNum; myNum = 15;"
      ],
      "answer": 1
    },
    {
      "question": "What is considered good practice when naming constant variables in C?",
      "options": [
        "Using special characters.",
        "Declaring them with uppercase letters.",
        "Using only lowercase letters.",
        "Using a mixture of uppercase and lowercase letters."
      ],
      "answer": 1
    },
    {
      "question": "What is the function of the + operator in C?",
      "options": [
        "To concatenate strings.",
        "To subtract values.",
        "To add together values or variables.",
        "To divide values."
      ],
      "answer": 2
    },
    {
      "question": "What does the % operator do in C?",
      "options": [
        "It performs a division and returns the quotient.",
        "It multiplies two values.",
        "It returns the division remainder.",
        "It assigns a value to a variable."
      ],
      "answer": 2
    },
    {
      "question": "Which assignment operator adds a value to a variable and then assigns the result back to that variable?",
      "options": [
        "=",
        "+=",
        "-=",
        "/="
      ],
      "answer": 1
    },
    {
      "question": "What do comparison operators return in C?",
      "options": [
        "A new variable.",
        "The larger of the two compared values.",
        "A Boolean value (1 for true, 0 for false).",
        "The difference between two values."
      ],
      "answer": 2
    },
    {
      "question": "Which logical operator returns true if both operands are true in C?",
      "options": [
        "||",
        "&&",
        "!",
        "%"
      ],
      "answer": 1
    },
    {
      "question": "What does the sizeof operator do in C?",
      "options": [
        "It determines the size of a data type or a variable in bytes.",
        "It compares the size of two variables.",
        "It increases the size of a data type.",
        "It returns the sum of sizes of multiple variables."
      ],
      "answer": 0
    },
    {
      "question": "What is the primary use of the bool data type in C?",
      "options": [
        "To store large numbers.",
        "To store characters.",
        "To represent values that are either true or false.",
        "To perform complex calculations."
      ],
      "answer": 2
    },
    {
      "question": "Which header file is required to use the bool data type in C?",
      "options": [
        "#include <boolean.h>",
        "#include <stdbool.h>",
        "#include <bool.h>",
        "#include <boolean_types.h>"
      ],
      "answer": 1
    },
    {
      "question": "How are boolean values typically represented in C?",
      "options": [
        "With the strings \"true\" and \"false\".",
        "With the numbers 1 (or any non-zero number) for true, and 0 for false.",
        "With the symbols + for true and - for false.",
        "With the words \"yes\" for true and \"no\" for false."
      ],
      "answer": 1
    },
    {
      "question": "What format specifier should you use to print a boolean value in C?",
      "options": [
        "%b",
        "%bool",
        "%d",
        "%s"
      ],
      "answer": 2
    },
    {
      "question": "In C, what will the following statement return: printf(\"%d\", 10 > 9);?",
      "options": [
        "10",
        "9",
        "1 (true)",
        "0 (false)"
      ],
      "answer": 2
    },
    {
      "question": "In C, how can you use booleans to check if a person is old enough to vote, assuming the voting age is 18?",
      "options": [
        "By comparing the person's age to 18 with an == operator.",
        "By comparing the person's age to 18 with a >= operator.",
        "By using the bool keyword to directly check the age.",
        "By subtracting 18 from the person's age and checking if the result is positive."
      ],
      "answer": 1
    },
    {
      "question": "What is the purpose of the if statement in C?",
      "options": [
        "To execute a block of code regardless of any conditions.",
        "To execute a block of code if a specified condition is true.",
        "To declare a variable.",
        "To create a loop."
      ],
      "answer": 1
    },
    {
      "question": "What does the else statement do in an if...else construct in C?",
      "options": [
        "It specifies a block of code to run if the if condition is false.",
        "It repeats the if statement.",
        "It checks another condition.",
        "It ends the program."
      ],
      "answer": 0
    },
    {
      "question": "How does the else if statement work in C?",
      "options": [
        "It is used to stop the execution of the program.",
        "It specifies a new condition to test if the first condition is false.",
        "It executes the same code as the if statement.",
        "It combines multiple conditions into one."
      ],
      "answer": 1
    },
    {
      "question": "What will the following C code output:\n\nint time = 20;\nif (time < 18) {\n  printf(\"Good day.\");\n} else {\n  printf(\"Good evening.\");\n}",
      "options": [
        "Good day.",
        "Good evening.",
        "It will not output anything.",
        "An error message."
      ],
      "answer": 1
    },
    {
      "question": "What is the ternary operator in C?",
      "options": [
        "A way to declare variables.",
        "An operator that takes three operands and returns a value based on a condition.",
        "A special function for time operations.",
        "An operator that divides a number by three."
      ],
      "answer": 1
    },
    {
      "question": "How can you rewrite the following using the ternary operator:\n\nint time = 20;\nif (time < 18) {\n  printf(\"Good day.\");\n} else {\n  printf(\"Good evening.\");\n}",
      "options": [
        "printf((time < 18) ? \"Good day.\" : \"Good evening.\");",
        "(time < 18) ? printf(\"Good day.\") : printf(\"Good evening.\");",
        "if (time < 18) ? \"Good day.\" : \"Good evening.\";",
        "time < 18 ? \"Good day.\" : \"Good evening.\";"
      ],
      "answer": 0
    },
    {
      "question": "What is the primary purpose of the switch statement in C?",
      "options": [
        "To execute a loop.",
        "To select one of many code blocks to be executed.",
        "To declare variables.",
        "To define a function."
      ],
      "answer": 1
    },
    {
      "question": "How does C determine which case to execute in a switch statement?",
      "options": [
        "It executes all cases sequentially.",
        "It compares the switch expression's value with each case.",
        "It selects a random case.",
        "It only executes the default case."
      ],
      "answer": 1
    },
    {
      "question": "What role does the break keyword play in a switch statement?",
      "options": [
        "It breaks the program.",
        "It exits the current case and prevents the execution of subsequent cases.",
        "It repeats the switch statement.",
        "It is used to declare a break in the code for readability."
      ],
      "answer": 1
    },
    {
      "question": "What happens if the switch expression does not match any case?",
      "options": [
        "The program throws an error.",
        "The program exits.",
        "The default case is executed, if it is provided.",
        "The first case is executed."
      ],
      "answer": 2
    },
    {
      "question": "In the following code, what will be the output:\n\nint day = 3;\nswitch (day) {\n  case 1:\n    printf(\"Monday\");\n    break;\n  case 2:\n    printf(\"Tuesday\");\n    break;\n  case 3:\n    printf(\"Wednesday\");\n    break;\n  case 4:\n    printf(\"Thursday\");\n    break;\n}",
      "options": [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday"
      ],
      "answer": 2
    },
    {
      "question": "Is the default keyword required in a switch statement in C?",
      "options": [
        "Yes, it is mandatory.",
        "No, it is optional but recommended.",
        "It is only required if there are more than 3 cases.",
        "The default keyword is not part of C's switch syntax."
      ],
      "answer": 1
    },
    {
      "question": "What is the main purpose of a loop in programming?",
      "options": [
        "To execute a function.",
        "To check a condition.",
        "To execute a block of code multiple times as long as a condition is true.",
        "To declare variables."
      ],
      "answer": 2
    },
    {
      "question": "How does a while loop work in C?",
      "options": [
        "It executes a block of code once, then checks a condition.",
        "It executes a block of code as long as a specified condition is true.",
        "It executes a block of code a fixed number of times.",
        "It checks a condition before executing any code."
      ],
      "answer": 1
    },
    {
      "question": "What is crucial to include in a while loop to avoid creating an infinite loop?",
      "options": [
        "A break statement.",
        "An increment or decrement operation.",
        "A return statement.",
        "A conditional statement."
      ],
      "answer": 1
    },
    {
      "question": "How does a do/while loop differ from a while loop?",
      "options": [
        "It only runs if the condition is false.",
        "It executes the code block once before checking the condition.",
        "It doesn't need a condition to run.",
        "It runs faster than a while loop."
      ],
      "answer": 1
    },
    {
      "question": "What will be the output of the following code:\n\nint i = 0;\nwhile (i < 3) {\n  printf(\"%d\\n\", i);\n  i++;\n}",
      "options": [
        "0 1 2",
        "1 2 3",
        "0 1 2 3",
        "An infinite loop with no output."
      ],
      "answer": 0
    },
    {
      "question": "In the context of a do/while loop, what happens if the condition is false after the first execution?",
      "options": [
        "The loop continues indefinitely.",
        "The loop stops executing.",
        "The loop executes once more before stopping.",
        "The program crashes."
      ],
      "answer": 1
    },
    {
      "question": "When is it most appropriate to use a for loop in C?",
      "options": [
        "When you want to execute a block of code for a known number of times.",
        "When you want to execute a block of code for an unknown number of times.",
        "When you only need to execute a block of code once.",
        "When you want to execute a block of code indefinitely."
      ],
      "answer": 0
    },
    {
      "question": "What does statement 1 in a for loop usually do?",
      "options": [
        "Checks a condition.",
        "Executes the code block.",
        "Initializes a variable.",
        "Increments or decrements a loop variable."
      ],
      "answer": 2
    },
    {
      "question": "What is the role of statement 2 in a for loop?",
      "options": [
        "It is executed after each iteration of the loop.",
        "It defines the condition for executing the code block.",
        "It initializes variables used in the loop.",
        "It terminates the loop immediately."
      ],
      "answer": 1
    },
    {
      "question": "How is statement 3 in a for loop typically used?",
      "options": [
        "To define a loop variable.",
        "To execute a function.",
        "To increment or decrement the loop variable.",
        "To check a condition."
      ],
      "answer": 2
    },
    {
      "question": "What will the following C code output:\n\nint i;\nfor (i = 0; i < 3; i++) {\n  printf(\"%d\\n\", i);\n}",
      "options": [
        "0 1 2",
        "1 2 3",
        "0 1 2 3",
        "An infinite loop with no output."
      ],
      "answer": 0
    },
    {
      "question": "What is a nested loop in C?",
      "options": [
        "A loop that can only be executed inside a function.",
        "A loop that restarts as soon as it ends.",
        "A loop placed inside another loop.",
        "A loop that executes only if another loop is false."
      ],
      "answer": 2
    },
    {
      "question": "What is the purpose of the break statement in C?",
      "options": [
        "To pause the execution of a loop.",
        "To terminate the execution of a loop.",
        "To skip the current iteration of a loop.",
        "To restart a loop from the beginning."
      ],
      "answer": 1
    },
    {
      "question": "How does the continue statement work in a loop in C?",
      "options": [
        "It exits the loop immediately.",
        "It skips to the next iteration of the loop.",
        "It repeats the current iteration of the loop.",
        "It pauses the loop temporarily."
      ],
      "answer": 1
    },
    {
      "question": "In a for loop, what happens when a break statement is executed?",
      "options": [
        "The loop runs infinitely.",
        "The loop stops and control passes to the statement following the loop.",
        "The loop skips the current iteration and continues with the next.",
        "The loop restarts from the first iteration."
      ],
      "answer": 1
    },
    {
      "question": "What will be the output of the following code:\n\nint i;\nfor (i = 0; i < 10; i++) {\n  if (i == 4) {\n    continue;\n  }\n  printf(\"%d\\n\", i);\n}",
      "options": [
        "0 1 2 3 5 6 7 8 9",
        "0 1 2 3 4 5 6 7 8 9",
        "0 1 2 3",
        "An infinite loop."
      ],
      "answer": 0
    },
    {
      "question": "Can break and continue be used in while loops?",
      "options": [
        "Yes, both can be used in while loops.",
        "No, they can only be used in for loops.",
        "Only break can be used in while loops.",
        "Only continue can be used in while loops."
      ],
      "answer": 0
    },
    {
      "question": "What is the effect of a continue statement in a while loop?",
      "options": [
        "It causes the loop to end immediately.",
        "It skips the rest of the loop's code block and continues with the next iteration.",
        "It repeats the current iteration from the beginning.",
        "It has no effect in a while loop."
      ],
      "answer": 1
    },
    {
      "question": "What is an array in C programming?",
      "options": [
        "A function to store multiple values.",
        "A data type for a single value.",
        "A variable used to store multiple values of the same type.",
        "A command to execute multiple functions."
      ],
      "answer": 2
    },
    {
      "question": "How do you access an element in an array in C?",
      "options": [
        "By specifying its value.",
        "By specifying its index number.",
        "By calling a function.",
        "By declaring the element."
      ],
      "answer": 1
    },
    {
      "question": "What is the index number of the first element in an array in C?",
      "options": [
        "1",
        "0",
        "-1",
        "Depends on the array size."
      ],
      "answer": 1
    },
    {
      "question": "How can you change the value of a specific element in an array in C?",
      "options": [
        "By using a loop.",
        "By specifying the index number and assigning a new value.",
        "By using the change() function.",
        "By redeclaring the array."
      ],
      "answer": 1
    },
    {
      "question": "Which of the following code snippets correctly loops through all elements of an array in C?",
      "options": [
        "for (int i = 0; i <= 4; i++) { printf(\"%d\\n\", myNumbers[i]); }",
        "for (int i = 0; i < 4; i++) { printf(\"%d\\n\", myNumbers[i]); }",
        "for (int i = 1; i <= 4; i++) { printf(\"%d\\n\", myNumbers[i]); }",
        "for (int i = 1; i < 4; i++) { printf(\"%d\\n\", myNumbers[i]); }"
      ],
      "answer": 1
    },
    {
      "question": "What is the correct way to declare an array of four integers in C and then add elements to it?",
      "options": [
        "int myNumbers[] = {25, 50, 75, 100};",
        "int myNumbers[4] = {25, 50, 75, 100};",
        "int myNumbers[4]; myNumbers[0] = 25; myNumbers[1] = 50; myNumbers[2] = 75; myNumbers[3] = 100;",
        "int myNumbers[]; myNumbers = {25, 50, 75, 100};"
      ],
      "answer": 2
    },
    {
      "question": "What is a multidimensional array in C?",
      "options": [
        "An array of functions.",
        "A single row of elements.",
        "An array consisting of arrays.",
        "A special type of variable."
      ],
      "answer": 2
    },
    {
      "question": "How do you create a two-dimensional array in C?",
      "options": [
        "By specifying one dimension.",
        "By using curly braces {}.",
        "By specifying two dimensions in square brackets.",
        "By declaring multiple arrays."
      ],
      "answer": 2
    },
    {
      "question": "How many dimensions does a 2D array have?",
      "options": [
        "One",
        "Two",
        "Three",
        "Four"
      ],
      "answer": 1
    },
    {
      "question": "How do you access an element in a 2D array?",
      "options": [
        "By specifying the index number of a single dimension.",
        "By specifying the index number of both the row and column.",
        "By using the access() function.",
        "By iterating through the array with a loop."
      ],
      "answer": 1
    },
    {
      "question": "What is the output of the following C code?\n\nint matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };\nprintf(\"%d\", matrix[0][2]);",
      "options": [
        "1",
        "4",
        "2",
        "8"
      ],
      "answer": 2
    },
    {
      "question": "How do you change an element in a 2D array in C?",
      "options": [
        "By specifying the index of the row and column and assigning a new value.",
        "By using a specific function.",
        "By reinitializing the entire array.",
        "It is not possible to change elements in a 2D array."
      ],
      "answer": 0
    },
    {
      "question": "How are strings represented in C?",
      "options": [
        "As a special string data type.",
        "As an array of characters.",
        "Using the string keyword.",
        "With integer arrays."
      ],
      "answer": 1
    },
    {
      "question": "What is the correct way to create a string in C?",
      "options": [
        "char greetings = \"Hello World!\";",
        "char greetings[] = \"Hello World!\";",
        "string greetings = \"Hello World!\";",
        "char* greetings = \"Hello World!\";"
      ],
      "answer": 1
    },
    {
      "question": "How do you print a string in C?",
      "options": [
        "Using the %c format specifier with printf().",
        "Using the %s format specifier with printf().",
        "Using the print() function.",
        "Directly passing the string to printf()."
      ],
      "answer": 1
    },
    {
      "question": "How can you access the first character of a string in C?",
      "options": [
        "greetings[1]",
        "greetings(0)",
        "greetings[0]",
        "first(greetings)"
      ],
      "answer": 2
    },
    {
      "question": "What is the purpose of the \\0 character in C strings?",
      "options": [
        "It represents a space.",
        "It indicates the end of the string.",
        "It separates words in a string.",
        "It converts characters to uppercase."
      ],
      "answer": 1
    },
    {
      "question": "What will be the output of the following code:\n\nchar carName[] = \"Volvo\";\nprintf(\"%s\", carName);",
      "options": [
        "V",
        "Volvo",
        "Error",
        "Empty string"
      ],
      "answer": 1
    },
    {
      "question": "How do you include a double quote inside a string in C?",
      "options": [
        "Using single quotes '\"'",
        "Using the escape character \\\"",
        "Using double quotes \"\"",
        "By breaking the string into parts"
      ],
      "answer": 1
    },
    {
      "question": "What is the result of the \\n escape character in a string in C?",
      "options": [
        "A tab space",
        "A new line",
        "A null character",
        "A backslash"
      ],
      "answer": 1
    },
    {
      "question": "What does the escape sequence \\\\ represent in a C string?",
      "options": [
        "A new line",
        "A single quote",
        "A double quote",
        "A backslash"
      ],
      "answer": 3
    },
    {
      "question": "What header file must be included to use string functions in C?",
      "options": [
        "<stdio.h>",
        "<stdlib.h>",
        "<string.h>",
        "<math.h>"
      ],
      "answer": 2
    },
    {
      "question": "What is the purpose of the strlen() function in C?",
      "options": [
        "To concatenate two strings",
        "To compare two strings",
        "To find the length of a string",
        "To copy one string to another"
      ],
      "answer": 2
    },
    {
      "question": "How does the strcmp() function in C determine if two strings are equal?",
      "options": [
        "By returning 1",
        "By returning the length of the strings",
        "By returning 0",
        "By returning the difference between the first two differing characters"
      ],
      "answer": 2
    },
    {
      "question": "What function is used to get user input in C?",
      "options": [
        "printf()",
        "scanf()",
        "get()",
        "input()"
      ],
      "answer": 1
    },
    {
      "question": "How do you store the input from the scanf() function into a variable?",
      "options": [
        "By using the variable name directly.",
        "By using the reference operator (&) with the variable.",
        "By using the dereference operator (*).",
        "By passing the variable as a string."
      ],
      "answer": 1
    },
    {
      "question": "What is the limitation of using scanf() for string inputs?",
      "options": [
        "It can only read numbers.",
        "It stops reading input at a whitespace character.",
        "It cannot read more than 10 characters.",
        "It only works with character arrays."
      ],
      "answer": 1
    },
    {
      "question": "How can you read a full line of text (including spaces) in C?",
      "options": [
        "Using scanf() with special flags.",
        "Using printf().",
        "Using fgets().",
        "Using gets()."
      ],
      "answer": 2
    },
    {
      "question": "What is the correct way to read a string input with spaces using fgets()?",
      "options": [
        "fgets(fullName, sizeof(fullName), stdin);",
        "scanf(\"%s\", fullName);",
        "fgets(fullName);",
        "scanf(\"%s\", &fullName);"
      ],
      "answer": 0
    },
    {
      "question": "How would you correctly use scanf() to read an integer and a character input from the user?",
      "options": [
        "scanf(\"%d %c\", myNum, myChar);",
        "scanf(\"%d %c\", &myNum, myChar);",
        "scanf(\"%d %c\", myNum, &myChar);",
        "scanf(\"%d %c\", &myNum, &myChar);"
      ],
      "answer": 3
    },
    {
      "question": "What is the role of a function in C programming?",
      "options": [
        "To store data.",
        "To execute a block of code when it is called.",
        "To declare variables.",
        "To create loops."
      ],
      "answer": 1
    },
    {
      "question": "How do you declare a function in C?",
      "options": [
        "By specifying the function name followed by parentheses and curly brackets.",
        "By using the function keyword.",
        "By assigning it to a variable.",
        "By using the void keyword alone."
      ],
      "answer": 0
    },
    {
      "question": "How can a function be called in C?",
      "options": [
        "By defining it again.",
        "By writing the function's name followed by parentheses and a semicolon.",
        "By using a special call function.",
        "Automatically when the program runs."
      ],
      "answer": 1
    },
    {
      "question": "How do you pass information to a function in C?",
      "options": [
        "By using global variables.",
        "By specifying parameters within the function\u00e2\u20ac\u2122s parentheses.",
        "By using the return statement.",
        "By declaring variables inside the function."
      ],
      "answer": 1
    },
    {
      "question": "What does the return statement do in a function in C?",
      "options": [
        "It exits the function.",
        "It sends back a value from the function to the caller.",
        "It repeats the function.",
        "It prints a value."
      ],
      "answer": 1
    },
    {
      "question": "How should a function be declared if it returns an integer and takes two integer parameters?",
      "options": [
        "void functionName(int, int);",
        "int functionName(int, int);",
        "functionName(int, int);",
        "int functionName();"
      ],
      "answer": 1
    },
    {
      "question": "What is the best practice for writing functions in C for code optimization?",
      "options": [
        "Declaring the function above main() and defining it below main().",
        "Defining the function inside main().",
        "Declaring and defining the function at the end of the program.",
        "Writing all functions in a separate file."
      ],
      "answer": 0
    }
  ]
}